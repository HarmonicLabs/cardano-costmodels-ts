import { canBeUInteger, forceBigUInt, CanBeUInteger } from "./utils/ints";
import { defineNormalProperty, defineReadOnlyProperty, hasOwn, isObject } from "@harmoniclabs/obj-utils";
import { CanBeCborString, Cbor, CborArray, CborBytes, CborMap, CborMapEntry, CborObj, CborString, CborUInt, forceCborString } from "@harmoniclabs/cbor";

export type AnyV1CostModel = CostModelPlutusV1 | CostModelPlutusV1Array;

export type AnyV2CostModel = CostModelPlutusV2 | CostModelPlutusV2Array;

export interface CostModels {
    PlutusScriptV1?: AnyV1CostModel
    PlutusScriptV2?: AnyV2CostModel
}

export const defaultV1Costs: CostModelPlutusV1 = Object.freeze({
    "addInteger-cpu-arguments-intercept": 205665,
    "addInteger-cpu-arguments-slope": 812,
    "addInteger-memory-arguments-intercept": 1,
    "addInteger-memory-arguments-slope": 1,
    "appendByteString-cpu-arguments-intercept": 1000,
    "appendByteString-cpu-arguments-slope": 571,
    "appendByteString-memory-arguments-intercept": 0,
    "appendByteString-memory-arguments-slope": 1,
    "appendString-cpu-arguments-intercept": 1000,
    "appendString-cpu-arguments-slope": 24177,
    "appendString-memory-arguments-intercept": 4,
    "appendString-memory-arguments-slope": 1,
    "bData-cpu-arguments": 1000,
    "bData-memory-arguments": 32,
    "blake2b_256-cpu-arguments-intercept": 117366,
    "blake2b_256-cpu-arguments-slope": 10475,
    "blake2b_256-memory-arguments": 4,
    "cekApplyCost-exBudgetCPU": 23000,
    "cekApplyCost-exBudgetMemory": 100,
    "cekBuiltinCost-exBudgetCPU": 23000,
    "cekBuiltinCost-exBudgetMemory": 100,
    "cekConstCost-exBudgetCPU": 23000,
    "cekConstCost-exBudgetMemory": 100,
    "cekDelayCost-exBudgetCPU": 23000,
    "cekDelayCost-exBudgetMemory": 100,
    "cekForceCost-exBudgetCPU": 23000,
    "cekForceCost-exBudgetMemory": 100,
    "cekLamCost-exBudgetCPU": 23000,
    "cekLamCost-exBudgetMemory": 100,
    "cekStartupCost-exBudgetCPU": 100,
    "cekStartupCost-exBudgetMemory": 100,
    "cekVarCost-exBudgetCPU": 23000,
    "cekVarCost-exBudgetMemory": 100,
    "chooseData-cpu-arguments": 19537,
    "chooseData-memory-arguments": 32,
    "chooseList-cpu-arguments": 175354,
    "chooseList-memory-arguments": 32,
    "chooseUnit-cpu-arguments": 46417,
    "chooseUnit-memory-arguments": 4,
    "consByteString-cpu-arguments-intercept": 221973,
    "consByteString-cpu-arguments-slope": 511,
    "consByteString-memory-arguments-intercept": 0,
    "consByteString-memory-arguments-slope": 1,
    "constrData-cpu-arguments": 89141,
    "constrData-memory-arguments": 32,
    "decodeUtf8-cpu-arguments-intercept": 497525,
    "decodeUtf8-cpu-arguments-slope": 14068,
    "decodeUtf8-memory-arguments-intercept": 4,
    "decodeUtf8-memory-arguments-slope": 2,
    "divideInteger-cpu-arguments-constant": 196500,
    "divideInteger-cpu-arguments-model-arguments-intercept": 453240,
    "divideInteger-cpu-arguments-model-arguments-slope": 220,
    "divideInteger-memory-arguments-intercept": 0,
    "divideInteger-memory-arguments-minimum": 1,
    "divideInteger-memory-arguments-slope": 1,
    "encodeUtf8-cpu-arguments-intercept": 1000,
    "encodeUtf8-cpu-arguments-slope": 28662,
    "encodeUtf8-memory-arguments-intercept": 4,
    "encodeUtf8-memory-arguments-slope": 2,
    "equalsByteString-cpu-arguments-constant": 245000,
    "equalsByteString-cpu-arguments-intercept": 216773,
    "equalsByteString-cpu-arguments-slope": 62,
    "equalsByteString-memory-arguments": 1,
    "equalsData-cpu-arguments-intercept": 1060367,
    "equalsData-cpu-arguments-slope": 12586,
    "equalsData-memory-arguments": 1,
    "equalsInteger-cpu-arguments-intercept": 208512,
    "equalsInteger-cpu-arguments-slope": 421,
    "equalsInteger-memory-arguments": 1,
    "equalsString-cpu-arguments-constant": 187000,
    "equalsString-cpu-arguments-intercept": 1000,
    "equalsString-cpu-arguments-slope": 52998,
    "equalsString-memory-arguments": 1,
    "fstPair-cpu-arguments": 80436,
    "fstPair-memory-arguments": 32,
    "headList-cpu-arguments": 43249,
    "headList-memory-arguments": 32,
    "iData-cpu-arguments": 1000,
    "iData-memory-arguments": 32,
    "ifThenElse-cpu-arguments": 80556,
    "ifThenElse-memory-arguments": 1,
    "indexByteString-cpu-arguments": 57667,
    "indexByteString-memory-arguments": 4,
    "lengthOfByteString-cpu-arguments": 1000,
    "lengthOfByteString-memory-arguments": 10,
    "lessThanByteString-cpu-arguments-intercept": 197145,
    "lessThanByteString-cpu-arguments-slope": 156,
    "lessThanByteString-memory-arguments": 1,
    "lessThanEqualsByteString-cpu-arguments-intercept": 197145,
    "lessThanEqualsByteString-cpu-arguments-slope": 156,
    "lessThanEqualsByteString-memory-arguments": 1,
    "lessThanEqualsInteger-cpu-arguments-intercept": 204924,
    "lessThanEqualsInteger-cpu-arguments-slope": 473,
    "lessThanEqualsInteger-memory-arguments": 1,
    "lessThanInteger-cpu-arguments-intercept": 208896,
    "lessThanInteger-cpu-arguments-slope": 511,
    "lessThanInteger-memory-arguments": 1,
    "listData-cpu-arguments": 52467,
    "listData-memory-arguments": 32,
    "mapData-cpu-arguments": 64832,
    "mapData-memory-arguments": 32,
    "mkCons-cpu-arguments": 65493,
    "mkCons-memory-arguments": 32,
    "mkNilData-cpu-arguments": 22558,
    "mkNilData-memory-arguments": 32,
    "mkNilPairData-cpu-arguments": 16563,
    "mkNilPairData-memory-arguments": 32,
    "mkPairData-cpu-arguments": 76511,
    "mkPairData-memory-arguments": 32,
    "modInteger-cpu-arguments-constant": 196500,
    "modInteger-cpu-arguments-model-arguments-intercept": 453240,
    "modInteger-cpu-arguments-model-arguments-slope": 220,
    "modInteger-memory-arguments-intercept": 0,
    "modInteger-memory-arguments-minimum": 1,
    "modInteger-memory-arguments-slope": 1,
    "multiplyInteger-cpu-arguments-intercept": 69522,
    "multiplyInteger-cpu-arguments-slope": 11687,
    "multiplyInteger-memory-arguments-intercept": 0,
    "multiplyInteger-memory-arguments-slope": 1,
    "nullList-cpu-arguments": 60091,
    "nullList-memory-arguments": 32,
    "quotientInteger-cpu-arguments-constant": 196500,
    "quotientInteger-cpu-arguments-model-arguments-intercept": 453240,
    "quotientInteger-cpu-arguments-model-arguments-slope": 220,
    "quotientInteger-memory-arguments-intercept": 0,
    "quotientInteger-memory-arguments-minimum": 1,
    "quotientInteger-memory-arguments-slope": 1,
    "remainderInteger-cpu-arguments-constant": 196500,
    "remainderInteger-cpu-arguments-model-arguments-intercept": 453240,
    "remainderInteger-cpu-arguments-model-arguments-slope": 220,
    "remainderInteger-memory-arguments-intercept": 0,
    "remainderInteger-memory-arguments-minimum": 1,
    "remainderInteger-memory-arguments-slope": 1,
    "sha2_256-cpu-arguments-intercept": 806990,
    "sha2_256-cpu-arguments-slope": 30482,
    "sha2_256-memory-arguments": 4,
    "sha3_256-cpu-arguments-intercept": 1927926,
    "sha3_256-cpu-arguments-slope": 82523,
    "sha3_256-memory-arguments": 4,
    "sliceByteString-cpu-arguments-intercept": 265318,
    "sliceByteString-cpu-arguments-slope": 0,
    "sliceByteString-memory-arguments-intercept": 4,
    "sliceByteString-memory-arguments-slope": 0,
    "sndPair-cpu-arguments": 85931,
    "sndPair-memory-arguments": 32,
    "subtractInteger-cpu-arguments-intercept": 205665,
    "subtractInteger-cpu-arguments-slope": 812,
    "subtractInteger-memory-arguments-intercept": 1,
    "subtractInteger-memory-arguments-slope": 1,
    "tailList-cpu-arguments": 41182,
    "tailList-memory-arguments": 32,
    "trace-cpu-arguments": 212342,
    "trace-memory-arguments": 32,
    "unBData-cpu-arguments": 31220,
    "unBData-memory-arguments": 32,
    "unConstrData-cpu-arguments": 32696,
    "unConstrData-memory-arguments": 32,
    "unIData-cpu-arguments": 43357,
    "unIData-memory-arguments": 32,
    "unListData-cpu-arguments": 32247,
    "unListData-memory-arguments": 32,
    "unMapData-cpu-arguments": 38314,
    "unMapData-memory-arguments": 32,
    "verifyEd25519Signature-cpu-arguments-intercept": 9462713,
    "verifyEd25519Signature-cpu-arguments-slope": 1021,
    "verifyEd25519Signature-memory-arguments": 10
}) as any;

export const defaultV2Costs: CostModelPlutusV2 = Object.freeze({
    "addInteger-cpu-arguments-intercept": 205665,
    "addInteger-cpu-arguments-slope": 812,
    "addInteger-memory-arguments-intercept": 1,
    "addInteger-memory-arguments-slope": 1,
    "appendByteString-cpu-arguments-intercept": 1000,
    "appendByteString-cpu-arguments-slope": 571,
    "appendByteString-memory-arguments-intercept": 0,
    "appendByteString-memory-arguments-slope": 1,
    "appendString-cpu-arguments-intercept": 1000,
    "appendString-cpu-arguments-slope": 24177,
    "appendString-memory-arguments-intercept": 4,
    "appendString-memory-arguments-slope": 1,
    "bData-cpu-arguments": 1000,
    "bData-memory-arguments": 32,
    "blake2b_256-cpu-arguments-intercept": 117366,
    "blake2b_256-cpu-arguments-slope": 10475,
    "blake2b_256-memory-arguments": 4,
    "cekApplyCost-exBudgetCPU": 23000,
    "cekApplyCost-exBudgetMemory": 100,
    "cekBuiltinCost-exBudgetCPU": 23000,
    "cekBuiltinCost-exBudgetMemory": 100,
    "cekConstCost-exBudgetCPU": 23000,
    "cekConstCost-exBudgetMemory": 100,
    "cekDelayCost-exBudgetCPU": 23000,
    "cekDelayCost-exBudgetMemory": 100,
    "cekForceCost-exBudgetCPU": 23000,
    "cekForceCost-exBudgetMemory": 100,
    "cekLamCost-exBudgetCPU": 23000,
    "cekLamCost-exBudgetMemory": 100,
    "cekStartupCost-exBudgetCPU": 100,
    "cekStartupCost-exBudgetMemory": 100,
    "cekVarCost-exBudgetCPU": 23000,
    "cekVarCost-exBudgetMemory": 100,
    "chooseData-cpu-arguments": 19537,
    "chooseData-memory-arguments": 32,
    "chooseList-cpu-arguments": 175354,
    "chooseList-memory-arguments": 32,
    "chooseUnit-cpu-arguments": 46417,
    "chooseUnit-memory-arguments": 4,
    "consByteString-cpu-arguments-intercept": 221973,
    "consByteString-cpu-arguments-slope": 511,
    "consByteString-memory-arguments-intercept": 0,
    "consByteString-memory-arguments-slope": 1,
    "constrData-cpu-arguments": 89141,
    "constrData-memory-arguments": 32,
    "decodeUtf8-cpu-arguments-intercept": 497525,
    "decodeUtf8-cpu-arguments-slope": 14068,
    "decodeUtf8-memory-arguments-intercept": 4,
    "decodeUtf8-memory-arguments-slope": 2,
    "divideInteger-cpu-arguments-constant": 196500,
    "divideInteger-cpu-arguments-model-arguments-intercept": 453240,
    "divideInteger-cpu-arguments-model-arguments-slope": 220,
    "divideInteger-memory-arguments-intercept": 0,
    "divideInteger-memory-arguments-minimum": 1,
    "divideInteger-memory-arguments-slope": 1,
    "encodeUtf8-cpu-arguments-intercept": 1000,
    "encodeUtf8-cpu-arguments-slope": 28662,
    "encodeUtf8-memory-arguments-intercept": 4,
    "encodeUtf8-memory-arguments-slope": 2,
    "equalsByteString-cpu-arguments-constant": 245000,
    "equalsByteString-cpu-arguments-intercept": 216773,
    "equalsByteString-cpu-arguments-slope": 62,
    "equalsByteString-memory-arguments": 1,
    "equalsData-cpu-arguments-intercept": 1060367,
    "equalsData-cpu-arguments-slope": 12586,
    "equalsData-memory-arguments": 1,
    "equalsInteger-cpu-arguments-intercept": 208512,
    "equalsInteger-cpu-arguments-slope": 421,
    "equalsInteger-memory-arguments": 1,
    "equalsString-cpu-arguments-constant": 187000,
    "equalsString-cpu-arguments-intercept": 1000,
    "equalsString-cpu-arguments-slope": 52998,
    "equalsString-memory-arguments": 1,
    "fstPair-cpu-arguments": 80436,
    "fstPair-memory-arguments": 32,
    "headList-cpu-arguments": 43249,
    "headList-memory-arguments": 32,
    "iData-cpu-arguments": 1000,
    "iData-memory-arguments": 32,
    "ifThenElse-cpu-arguments": 80556,
    "ifThenElse-memory-arguments": 1,
    "indexByteString-cpu-arguments": 57667,
    "indexByteString-memory-arguments": 4,
    "lengthOfByteString-cpu-arguments": 1000,
    "lengthOfByteString-memory-arguments": 10,
    "lessThanByteString-cpu-arguments-intercept": 197145,
    "lessThanByteString-cpu-arguments-slope": 156,
    "lessThanByteString-memory-arguments": 1,
    "lessThanEqualsByteString-cpu-arguments-intercept": 197145,
    "lessThanEqualsByteString-cpu-arguments-slope": 156,
    "lessThanEqualsByteString-memory-arguments": 1,
    "lessThanEqualsInteger-cpu-arguments-intercept": 204924,
    "lessThanEqualsInteger-cpu-arguments-slope": 473,
    "lessThanEqualsInteger-memory-arguments": 1,
    "lessThanInteger-cpu-arguments-intercept": 208896,
    "lessThanInteger-cpu-arguments-slope": 511,
    "lessThanInteger-memory-arguments": 1,
    "listData-cpu-arguments": 52467,
    "listData-memory-arguments": 32,
    "mapData-cpu-arguments": 64832,
    "mapData-memory-arguments": 32,
    "mkCons-cpu-arguments": 65493,
    "mkCons-memory-arguments": 32,
    "mkNilData-cpu-arguments": 22558,
    "mkNilData-memory-arguments": 32,
    "mkNilPairData-cpu-arguments": 16563,
    "mkNilPairData-memory-arguments": 32,
    "mkPairData-cpu-arguments": 76511,
    "mkPairData-memory-arguments": 32,
    "modInteger-cpu-arguments-constant": 196500,
    "modInteger-cpu-arguments-model-arguments-intercept": 453240,
    "modInteger-cpu-arguments-model-arguments-slope": 220,
    "modInteger-memory-arguments-intercept": 0,
    "modInteger-memory-arguments-minimum": 1,
    "modInteger-memory-arguments-slope": 1,
    "multiplyInteger-cpu-arguments-intercept": 69522,
    "multiplyInteger-cpu-arguments-slope": 11687,
    "multiplyInteger-memory-arguments-intercept": 0,
    "multiplyInteger-memory-arguments-slope": 1,
    "nullList-cpu-arguments": 60091,
    "nullList-memory-arguments": 32,
    "quotientInteger-cpu-arguments-constant": 196500,
    "quotientInteger-cpu-arguments-model-arguments-intercept": 453240,
    "quotientInteger-cpu-arguments-model-arguments-slope": 220,
    "quotientInteger-memory-arguments-intercept": 0,
    "quotientInteger-memory-arguments-minimum": 1,
    "quotientInteger-memory-arguments-slope": 1,
    "remainderInteger-cpu-arguments-constant": 196500,
    "remainderInteger-cpu-arguments-model-arguments-intercept": 453240,
    "remainderInteger-cpu-arguments-model-arguments-slope": 220,
    "remainderInteger-memory-arguments-intercept": 0,
    "remainderInteger-memory-arguments-minimum": 1,
    "remainderInteger-memory-arguments-slope": 1,
    "serialiseData-cpu-arguments-intercept": 1159724,
    "serialiseData-cpu-arguments-slope": 392670,
    "serialiseData-memory-arguments-intercept": 0,
    "serialiseData-memory-arguments-slope": 2,
    "sha2_256-cpu-arguments-intercept": 806990,
    "sha2_256-cpu-arguments-slope": 30482,
    "sha2_256-memory-arguments": 4,
    "sha3_256-cpu-arguments-intercept": 1927926,
    "sha3_256-cpu-arguments-slope": 82523,
    "sha3_256-memory-arguments": 4,
    "sliceByteString-cpu-arguments-intercept": 265318,
    "sliceByteString-cpu-arguments-slope": 0,
    "sliceByteString-memory-arguments-intercept": 4,
    "sliceByteString-memory-arguments-slope": 0,
    "sndPair-cpu-arguments": 85931,
    "sndPair-memory-arguments": 32,
    "subtractInteger-cpu-arguments-intercept": 205665,
    "subtractInteger-cpu-arguments-slope": 812,
    "subtractInteger-memory-arguments-intercept": 1,
    "subtractInteger-memory-arguments-slope": 1,
    "tailList-cpu-arguments": 41182,
    "tailList-memory-arguments": 32,
    "trace-cpu-arguments": 212342,
    "trace-memory-arguments": 32,
    "unBData-cpu-arguments": 31220,
    "unBData-memory-arguments": 32,
    "unConstrData-cpu-arguments": 32696,
    "unConstrData-memory-arguments": 32,
    "unIData-cpu-arguments": 43357,
    "unIData-memory-arguments": 32,
    "unListData-cpu-arguments": 32247,
    "unListData-memory-arguments": 32,
    "unMapData-cpu-arguments": 38314,
    "unMapData-memory-arguments": 32,
    "verifyEcdsaSecp256k1Signature-cpu-arguments": 35892428,
    "verifyEcdsaSecp256k1Signature-memory-arguments": 10,
    "verifyEd25519Signature-cpu-arguments-intercept": 57996947,
    "verifyEd25519Signature-cpu-arguments-slope": 18975,
    "verifyEd25519Signature-memory-arguments": 10,
    "verifySchnorrSecp256k1Signature-cpu-arguments-intercept": 38887044,
    "verifySchnorrSecp256k1Signature-cpu-arguments-slope": 32947,
    "verifySchnorrSecp256k1Signature-memory-arguments": 10
}) as any;

export const costModelV1Keys: (keyof CostModelPlutusV1)[] = Object.freeze( Object.keys( defaultV1Costs ) ) as any;

export const costModelV2Keys: (keyof CostModelPlutusV2)[] = Object.freeze( Object.keys( defaultV2Costs ) ) as any;


export function costModelV1ToFakeV2( costmdlsV1: AnyV1CostModel ): CostModelPlutusV2
{    
    const costs = toCostModelV1( costmdlsV1 );

    const a_lot = BigInt( Number.MAX_SAFE_INTEGER );

    function makeItALot( key: keyof CostModelPlutusV2 )
    {
        defineReadOnlyProperty( costs, key, a_lot );
    }

    makeItALot( "serialiseData-cpu-arguments-intercept" );
    makeItALot( "serialiseData-cpu-arguments-slope" );
    makeItALot( "serialiseData-memory-arguments-intercept" );
    makeItALot( "serialiseData-memory-arguments-slope" );
    makeItALot( "verifyEcdsaSecp256k1Signature-cpu-arguments" );
    makeItALot( "verifyEcdsaSecp256k1Signature-memory-arguments" );
    makeItALot( "verifySchnorrSecp256k1Signature-cpu-arguments-intercept" );
    makeItALot( "verifySchnorrSecp256k1Signature-cpu-arguments-slope" );
    makeItALot( "verifySchnorrSecp256k1Signature-memory-arguments" );

    return costs as any;
}

export function isCostModelsV1( something: any ): something is AnyV1CostModel
{
    if(!( typeof something === "object" && something !== null )) return false;

    return (
        Array.isArray( something ) ?

        something.length >= 166 && something.every( canBeUInteger ) :

        costModelV1Keys.every( k => {
            const val = something[k];
            return val !== undefined && canBeUInteger( val ) 
        })
    )
}

export function isCostModelsV2( something: any ): something is AnyV2CostModel
{
    if(!( typeof something === "object" && something !== null )) return false;

    return (
        Array.isArray( something ) ?

        something.length >= 175 && something.every( canBeUInteger ) :

        costModelV2Keys.every( k => {
            const val = something[k];
            return val !== undefined && canBeUInteger( val ) 
        })
    )
}

export function isCostModels( something: any ): something is CostModels
{
    if(!isObject( something )) return false;

    let hasV1, hasV2;
    hasV1 = hasV2 = false;

    if( hasOwn<object,"PlutusScriptV1">( something, "PlutusScriptV1" ) )
    {
        hasV1 = true;
        if( !isCostModelsV1( something.PlutusScriptV1 ) ) return false;
    }
    
    if( hasOwn<object,"PlutusScriptV2">( something, "PlutusScriptV2" ) )
    {
        hasV2 = true;
        if( !isCostModelsV2( something.PlutusScriptV2 ) ) return false;
    }

    if(!( hasV1 || hasV2 )) return false

    return true
};

export function costModelsToCborObj( costmdls: CostModels ): CborMap
{
    const {
        PlutusScriptV1,
        PlutusScriptV2
    } = costmdls;

    return new CborMap([
        PlutusScriptV1 === undefined ? undefined :
        {
            k: new CborUInt( 0 ),
            v: new CborArray( toCostModelArrV1( PlutusScriptV1 ).map( n => new CborUInt( forceBigUInt( n ) ) ) )
        },
        PlutusScriptV2 === undefined ? undefined :
        {
            k: new CborUInt( 1 ),
            v: new CborArray( toCostModelArrV2( PlutusScriptV2 ).map( n => new CborUInt( forceBigUInt( n ) ) ) )
        }
    ].filter( elem => elem !== undefined ) as CborMapEntry[])
}

export function costModelsFromCbor( cStr: CanBeCborString ): CostModels
{
    return costModelsFromCborObj( Cbor.parse( forceCborString( cStr ) ) );
}
export function costModelsFromCborObj( cObj: CborObj | undefined ): CostModels
{
    if( cObj === undefined || !( cObj instanceof CborMap )) return {};

    const costs = {}

    cObj.map.forEach( ({ k, v }) => {

        if( k instanceof CborUInt && v instanceof CborArray && v.array.every( n => n instanceof CborUInt ))
        {
            if( Number( k.num ) === 0 )
            {
                defineReadOnlyProperty(
                    costs, "PlutusScriptV1", toCostModelV1( (v.array.map( n => (n as CborUInt).num ) ) as any )
                )
            }
            if( Number( k.num ) === 1 )
            {
                defineReadOnlyProperty(
                    costs, "PlutusScriptV2", toCostModelV2( (v.array.map( n => (n as CborUInt).num ) ) as any )
                )
            }
        }
    })

    return costs;
}

export interface CostModelsToLanguageViewCborOpts {
    mustHaveV1?: boolean,
    mustHaveV2?: boolean
}

export function costModelsToLanguageViewCbor( costmdls: CostModels, opts: CostModelsToLanguageViewCborOpts ): CborString
{
    const {
        PlutusScriptV1,
        PlutusScriptV2
    } = costmdls;

    if( opts.mustHaveV1 === true && PlutusScriptV1 === undefined )
    throw new Error("missing required PlutusScriptV1")

    if( opts.mustHaveV2 === true && PlutusScriptV2 === undefined )
    throw new Error("missing required PlutusScriptV2")

    return Cbor.encode(
        new CborMap([
            opts.mustHaveV1 ?
            {
                // k: new CborUInt(1),
                k: new CborBytes(Uint8Array.from([0])),

                // plutus v1 language view is messed up, not my fault
                v: new CborBytes(
                    Cbor.encode(
                        new CborArray(
                            toCostModelArrV1( PlutusScriptV1 as any )
                            .map( n => new CborUInt( forceBigUInt( n ) ) ),
                            {
                                indefinite: true
                            }
                        )
                    ).asBytes
                )
            } : undefined,
            opts.mustHaveV2 ? 
            {
                k: new CborUInt(1),
                v: new CborArray( toCostModelArrV2( PlutusScriptV2 as any ).map( n => new CborUInt( forceBigUInt( n ) ) ) )
            } : undefined
        ].filter( elem => elem !== undefined ) as CborMapEntry[])
    )
}

export function costModelsToJson( costmdls: CostModels )
{
    const _pv1 = costmdls.PlutusScriptV1 === undefined ? undefined : toCostModelV1( costmdls.PlutusScriptV1 );
    const _pv2 = costmdls.PlutusScriptV2 === undefined ? undefined : toCostModelV2( costmdls.PlutusScriptV2 );

    const pv1 = {};
    if( _pv1 !== undefined )
    {
        const ks = Object.keys( _pv1 ) as (keyof CostModelPlutusV1)[];
        const n = ks.length;
        for(let i = 0; i < n; i++)
        {
            defineReadOnlyProperty(
                pv1, ks[i], forceBigUInt( _pv1[ks[i]] ).toString()
            )
        }
    }

    const pv2 = {};
    if( _pv2 !== undefined )
    {
        const ks = Object.keys( _pv2 ) as (keyof CostModelPlutusV2)[];
        const n = ks.length;
        for(let i = 0; i < n; i++)
        {
            defineReadOnlyProperty(
                pv2, ks[i], forceBigUInt( _pv2[ks[i]] ).toString()
            )
        }
    }

    return {
        PlutusScriptV1: pv1,
        PlutusScriptV2: pv2
    }

}

export function toCostModelArrV1( v1: AnyV1CostModel ): CostModelPlutusV1Array
{
    if( Array.isArray( v1 ) ) return v1;

    // order matters; cant do 'Object.keys'
    return Object.freeze([
        v1["addInteger-cpu-arguments-intercept"],
        v1["addInteger-cpu-arguments-slope"],
        v1["addInteger-memory-arguments-intercept"],
        v1["addInteger-memory-arguments-slope"],
        v1["appendByteString-cpu-arguments-intercept"],
        v1["appendByteString-cpu-arguments-slope"],
        v1["appendByteString-memory-arguments-intercept"],
        v1["appendByteString-memory-arguments-slope"],
        v1["appendString-cpu-arguments-intercept"],
        v1["appendString-cpu-arguments-slope"],
        v1["appendString-memory-arguments-intercept"],
        v1["appendString-memory-arguments-slope"],
        v1["bData-cpu-arguments"],
        v1["bData-memory-arguments"],
        v1["blake2b_256-cpu-arguments-intercept"],
        v1["blake2b_256-cpu-arguments-slope"],
        v1["blake2b_256-memory-arguments"],
        v1["cekApplyCost-exBudgetCPU"],
        v1["cekApplyCost-exBudgetMemory"],
        v1["cekBuiltinCost-exBudgetCPU"],
        v1["cekBuiltinCost-exBudgetMemory"],
        v1["cekConstCost-exBudgetCPU"],
        v1["cekConstCost-exBudgetMemory"],
        v1["cekDelayCost-exBudgetCPU"],
        v1["cekDelayCost-exBudgetMemory"],
        v1["cekForceCost-exBudgetCPU"],
        v1["cekForceCost-exBudgetMemory"],
        v1["cekLamCost-exBudgetCPU"],
        v1["cekLamCost-exBudgetMemory"],
        v1["cekStartupCost-exBudgetCPU"],
        v1["cekStartupCost-exBudgetMemory"],
        v1["cekVarCost-exBudgetCPU"],
        v1["cekVarCost-exBudgetMemory"],
        v1["chooseData-cpu-arguments"],
        v1["chooseData-memory-arguments"],
        v1["chooseList-cpu-arguments"],
        v1["chooseList-memory-arguments"],
        v1["chooseUnit-cpu-arguments"],
        v1["chooseUnit-memory-arguments"],
        v1["consByteString-cpu-arguments-intercept"],
        v1["consByteString-cpu-arguments-slope"],
        v1["consByteString-memory-arguments-intercept"],
        v1["consByteString-memory-arguments-slope"],
        v1["constrData-cpu-arguments"],
        v1["constrData-memory-arguments"],
        v1["decodeUtf8-cpu-arguments-intercept"],
        v1["decodeUtf8-cpu-arguments-slope"],
        v1["decodeUtf8-memory-arguments-intercept"],
        v1["decodeUtf8-memory-arguments-slope"],
        v1["divideInteger-cpu-arguments-constant"],
        v1["divideInteger-cpu-arguments-model-arguments-intercept"],
        v1["divideInteger-cpu-arguments-model-arguments-slope"],
        v1["divideInteger-memory-arguments-intercept"],
        v1["divideInteger-memory-arguments-minimum"],
        v1["divideInteger-memory-arguments-slope"],
        v1["encodeUtf8-cpu-arguments-intercept"],
        v1["encodeUtf8-cpu-arguments-slope"],
        v1["encodeUtf8-memory-arguments-intercept"],
        v1["encodeUtf8-memory-arguments-slope"],
        v1["equalsByteString-cpu-arguments-constant"],
        v1["equalsByteString-cpu-arguments-intercept"],
        v1["equalsByteString-cpu-arguments-slope"],
        v1["equalsByteString-memory-arguments"],
        v1["equalsData-cpu-arguments-intercept"],
        v1["equalsData-cpu-arguments-slope"],
        v1["equalsData-memory-arguments"],
        v1["equalsInteger-cpu-arguments-intercept"],
        v1["equalsInteger-cpu-arguments-slope"],
        v1["equalsInteger-memory-arguments"],
        v1["equalsString-cpu-arguments-constant"],
        v1["equalsString-cpu-arguments-intercept"],
        v1["equalsString-cpu-arguments-slope"],
        v1["equalsString-memory-arguments"],
        v1["fstPair-cpu-arguments"],
        v1["fstPair-memory-arguments"],
        v1["headList-cpu-arguments"],
        v1["headList-memory-arguments"],
        v1["iData-cpu-arguments"],
        v1["iData-memory-arguments"],
        v1["ifThenElse-cpu-arguments"],
        v1["ifThenElse-memory-arguments"],
        v1["indexByteString-cpu-arguments"],
        v1["indexByteString-memory-arguments"],
        v1["lengthOfByteString-cpu-arguments"],
        v1["lengthOfByteString-memory-arguments"],
        v1["lessThanByteString-cpu-arguments-intercept"],
        v1["lessThanByteString-cpu-arguments-slope"],
        v1["lessThanByteString-memory-arguments"],
        v1["lessThanEqualsByteString-cpu-arguments-intercept"],
        v1["lessThanEqualsByteString-cpu-arguments-slope"],
        v1["lessThanEqualsByteString-memory-arguments"],
        v1["lessThanEqualsInteger-cpu-arguments-intercept"],
        v1["lessThanEqualsInteger-cpu-arguments-slope"],
        v1["lessThanEqualsInteger-memory-arguments"],
        v1["lessThanInteger-cpu-arguments-intercept"],
        v1["lessThanInteger-cpu-arguments-slope"],
        v1["lessThanInteger-memory-arguments"],
        v1["listData-cpu-arguments"],
        v1["listData-memory-arguments"],
        v1["mapData-cpu-arguments"],
        v1["mapData-memory-arguments"],
        v1["mkCons-cpu-arguments"],
        v1["mkCons-memory-arguments"],
        v1["mkNilData-cpu-arguments"],
        v1["mkNilData-memory-arguments"],
        v1["mkNilPairData-cpu-arguments"],
        v1["mkNilPairData-memory-arguments"],
        v1["mkPairData-cpu-arguments"],
        v1["mkPairData-memory-arguments"],
        v1["modInteger-cpu-arguments-constant"],
        v1["modInteger-cpu-arguments-model-arguments-intercept"],
        v1["modInteger-cpu-arguments-model-arguments-slope"],
        v1["modInteger-memory-arguments-intercept"],
        v1["modInteger-memory-arguments-minimum"],
        v1["modInteger-memory-arguments-slope"],
        v1["multiplyInteger-cpu-arguments-intercept"],
        v1["multiplyInteger-cpu-arguments-slope"],
        v1["multiplyInteger-memory-arguments-intercept"],
        v1["multiplyInteger-memory-arguments-slope"],
        v1["nullList-cpu-arguments"],
        v1["nullList-memory-arguments"],
        v1["quotientInteger-cpu-arguments-constant"],
        v1["quotientInteger-cpu-arguments-model-arguments-intercept"],
        v1["quotientInteger-cpu-arguments-model-arguments-slope"],
        v1["quotientInteger-memory-arguments-intercept"],
        v1["quotientInteger-memory-arguments-minimum"],
        v1["quotientInteger-memory-arguments-slope"],
        v1["remainderInteger-cpu-arguments-constant"],
        v1["remainderInteger-cpu-arguments-model-arguments-intercept"],
        v1["remainderInteger-cpu-arguments-model-arguments-slope"],
        v1["remainderInteger-memory-arguments-intercept"],
        v1["remainderInteger-memory-arguments-minimum"],
        v1["remainderInteger-memory-arguments-slope"],
        v1["sha2_256-cpu-arguments-intercept"],
        v1["sha2_256-cpu-arguments-slope"],
        v1["sha2_256-memory-arguments"],
        v1["sha3_256-cpu-arguments-intercept"],
        v1["sha3_256-cpu-arguments-slope"],
        v1["sha3_256-memory-arguments"],
        v1["sliceByteString-cpu-arguments-intercept"],
        v1["sliceByteString-cpu-arguments-slope"],
        v1["sliceByteString-memory-arguments-intercept"],
        v1["sliceByteString-memory-arguments-slope"],
        v1["sndPair-cpu-arguments"],
        v1["sndPair-memory-arguments"],
        v1["subtractInteger-cpu-arguments-intercept"],
        v1["subtractInteger-cpu-arguments-slope"],
        v1["subtractInteger-memory-arguments-intercept"],
        v1["subtractInteger-memory-arguments-slope"],
        v1["tailList-cpu-arguments"],
        v1["tailList-memory-arguments"],
        v1["trace-cpu-arguments"],
        v1["trace-memory-arguments"],
        v1["unBData-cpu-arguments"],
        v1["unBData-memory-arguments"],
        v1["unConstrData-cpu-arguments"],
        v1["unConstrData-memory-arguments"],
        v1["unIData-cpu-arguments"],
        v1["unIData-memory-arguments"],
        v1["unListData-cpu-arguments"],
        v1["unListData-memory-arguments"],
        v1["unMapData-cpu-arguments"],
        v1["unMapData-memory-arguments"],
        v1["verifyEd25519Signature-cpu-arguments-intercept"],
        v1["verifyEd25519Signature-cpu-arguments-slope"],
        v1["verifyEd25519Signature-memory-arguments"],
    ]) as any;
}

export function toCostModelV1( v1: AnyV1CostModel ): CostModelPlutusV1
{
    if( !Array.isArray( v1 ) ) return v1;

    const result = {};
    let val: bigint;
    
    for( let i = 0; i < costModelV1Keys.length; i++ )
    {
        val = forceBigUInt( v1[i] );
        if(  val === undefined )
        {
            throw new Error(
                "impossible to convert cost model v1 array to object; not enough arguments; arguments found in total: " + i.toString()
            );
        }

        defineReadOnlyProperty(
            result,
            costModelV1Keys[i],
            val
        );
    }

    return result as any;
}

export function toCostModelV2( v2: AnyV2CostModel ): CostModelPlutusV2
{
    if( !Array.isArray( v2 ) ) return v2;

    const result = {};
    let val: bigint;
    
    for( let i = 0; i < costModelV2Keys.length; i++ )
    {
        val = forceBigUInt( v2[i] );
        if(  val === undefined )
        {
            throw new Error(
                "impossible to convert cost model v2 array to object; not enough arguments; arguments found in total: " + i.toString()
            );
        }

        defineNormalProperty(
            result,
            costModelV2Keys[i],
            val
        );
    }

    return result as any;
}

export function toCostModelArrV2( v2: AnyV2CostModel ): CostModelPlutusV2Array
{
    if( Array.isArray( v2 ) ) return v2;

    // order matters; cant do 'Object.keys'
    return Object.freeze([
        v2["addInteger-cpu-arguments-intercept"],
        v2["addInteger-cpu-arguments-slope"],
        v2["addInteger-memory-arguments-intercept"],
        v2["addInteger-memory-arguments-slope"],
        v2["appendByteString-cpu-arguments-intercept"],
        v2["appendByteString-cpu-arguments-slope"],
        v2["appendByteString-memory-arguments-intercept"],
        v2["appendByteString-memory-arguments-slope"],
        v2["appendString-cpu-arguments-intercept"],
        v2["appendString-cpu-arguments-slope"],
        v2["appendString-memory-arguments-intercept"],
        v2["appendString-memory-arguments-slope"],
        v2["bData-cpu-arguments"],
        v2["bData-memory-arguments"],
        v2["blake2b_256-cpu-arguments-intercept"],
        v2["blake2b_256-cpu-arguments-slope"],
        v2["blake2b_256-memory-arguments"],
        v2["cekApplyCost-exBudgetCPU"],
        v2["cekApplyCost-exBudgetMemory"],
        v2["cekBuiltinCost-exBudgetCPU"],
        v2["cekBuiltinCost-exBudgetMemory"],
        v2["cekConstCost-exBudgetCPU"],
        v2["cekConstCost-exBudgetMemory"],
        v2["cekDelayCost-exBudgetCPU"],
        v2["cekDelayCost-exBudgetMemory"],
        v2["cekForceCost-exBudgetCPU"],
        v2["cekForceCost-exBudgetMemory"],
        v2["cekLamCost-exBudgetCPU"],
        v2["cekLamCost-exBudgetMemory"],
        v2["cekStartupCost-exBudgetCPU"],
        v2["cekStartupCost-exBudgetMemory"],
        v2["cekVarCost-exBudgetCPU"],
        v2["cekVarCost-exBudgetMemory"],
        v2["chooseData-cpu-arguments"],
        v2["chooseData-memory-arguments"],
        v2["chooseList-cpu-arguments"],
        v2["chooseList-memory-arguments"],
        v2["chooseUnit-cpu-arguments"],
        v2["chooseUnit-memory-arguments"],
        v2["consByteString-cpu-arguments-intercept"],
        v2["consByteString-cpu-arguments-slope"],
        v2["consByteString-memory-arguments-intercept"],
        v2["consByteString-memory-arguments-slope"],
        v2["constrData-cpu-arguments"],
        v2["constrData-memory-arguments"],
        v2["decodeUtf8-cpu-arguments-intercept"],
        v2["decodeUtf8-cpu-arguments-slope"],
        v2["decodeUtf8-memory-arguments-intercept"],
        v2["decodeUtf8-memory-arguments-slope"],
        v2["divideInteger-cpu-arguments-constant"],
        v2["divideInteger-cpu-arguments-model-arguments-intercept"],
        v2["divideInteger-cpu-arguments-model-arguments-slope"],
        v2["divideInteger-memory-arguments-intercept"],
        v2["divideInteger-memory-arguments-minimum"],
        v2["divideInteger-memory-arguments-slope"],
        v2["encodeUtf8-cpu-arguments-intercept"],
        v2["encodeUtf8-cpu-arguments-slope"],
        v2["encodeUtf8-memory-arguments-intercept"],
        v2["encodeUtf8-memory-arguments-slope"],
        v2["equalsByteString-cpu-arguments-constant"],
        v2["equalsByteString-cpu-arguments-intercept"],
        v2["equalsByteString-cpu-arguments-slope"],
        v2["equalsByteString-memory-arguments"],
        v2["equalsData-cpu-arguments-intercept"],
        v2["equalsData-cpu-arguments-slope"],
        v2["equalsData-memory-arguments"],
        v2["equalsInteger-cpu-arguments-intercept"],
        v2["equalsInteger-cpu-arguments-slope"],
        v2["equalsInteger-memory-arguments"],
        v2["equalsString-cpu-arguments-constant"],
        v2["equalsString-cpu-arguments-intercept"],
        v2["equalsString-cpu-arguments-slope"],
        v2["equalsString-memory-arguments"],
        v2["fstPair-cpu-arguments"],
        v2["fstPair-memory-arguments"],
        v2["headList-cpu-arguments"],
        v2["headList-memory-arguments"],
        v2["iData-cpu-arguments"],
        v2["iData-memory-arguments"],
        v2["ifThenElse-cpu-arguments"],
        v2["ifThenElse-memory-arguments"],
        v2["indexByteString-cpu-arguments"],
        v2["indexByteString-memory-arguments"],
        v2["lengthOfByteString-cpu-arguments"],
        v2["lengthOfByteString-memory-arguments"],
        v2["lessThanByteString-cpu-arguments-intercept"],
        v2["lessThanByteString-cpu-arguments-slope"],
        v2["lessThanByteString-memory-arguments"],
        v2["lessThanEqualsByteString-cpu-arguments-intercept"],
        v2["lessThanEqualsByteString-cpu-arguments-slope"],
        v2["lessThanEqualsByteString-memory-arguments"],
        v2["lessThanEqualsInteger-cpu-arguments-intercept"],
        v2["lessThanEqualsInteger-cpu-arguments-slope"],
        v2["lessThanEqualsInteger-memory-arguments"],
        v2["lessThanInteger-cpu-arguments-intercept"],
        v2["lessThanInteger-cpu-arguments-slope"],
        v2["lessThanInteger-memory-arguments"],
        v2["listData-cpu-arguments"],
        v2["listData-memory-arguments"],
        v2["mapData-cpu-arguments"],
        v2["mapData-memory-arguments"],
        v2["mkCons-cpu-arguments"],
        v2["mkCons-memory-arguments"],
        v2["mkNilData-cpu-arguments"],
        v2["mkNilData-memory-arguments"],
        v2["mkNilPairData-cpu-arguments"],
        v2["mkNilPairData-memory-arguments"],
        v2["mkPairData-cpu-arguments"],
        v2["mkPairData-memory-arguments"],
        v2["modInteger-cpu-arguments-constant"],
        v2["modInteger-cpu-arguments-model-arguments-intercept"],
        v2["modInteger-cpu-arguments-model-arguments-slope"],
        v2["modInteger-memory-arguments-intercept"],
        v2["modInteger-memory-arguments-minimum"],
        v2["modInteger-memory-arguments-slope"],
        v2["multiplyInteger-cpu-arguments-intercept"],
        v2["multiplyInteger-cpu-arguments-slope"],
        v2["multiplyInteger-memory-arguments-intercept"],
        v2["multiplyInteger-memory-arguments-slope"],
        v2["nullList-cpu-arguments"],
        v2["nullList-memory-arguments"],
        v2["quotientInteger-cpu-arguments-constant"],
        v2["quotientInteger-cpu-arguments-model-arguments-intercept"],
        v2["quotientInteger-cpu-arguments-model-arguments-slope"],
        v2["quotientInteger-memory-arguments-intercept"],
        v2["quotientInteger-memory-arguments-minimum"],
        v2["quotientInteger-memory-arguments-slope"],
        v2["remainderInteger-cpu-arguments-constant"],
        v2["remainderInteger-cpu-arguments-model-arguments-intercept"],
        v2["remainderInteger-cpu-arguments-model-arguments-slope"],
        v2["remainderInteger-memory-arguments-intercept"],
        v2["remainderInteger-memory-arguments-minimum"],
        v2["remainderInteger-memory-arguments-slope"],
        v2["serialiseData-cpu-arguments-intercept"],
        v2["serialiseData-cpu-arguments-slope"],
        v2["serialiseData-memory-arguments-intercept"],
        v2["serialiseData-memory-arguments-slope"],
        v2["sha2_256-cpu-arguments-intercept"],
        v2["sha2_256-cpu-arguments-slope"],
        v2["sha2_256-memory-arguments"],
        v2["sha3_256-cpu-arguments-intercept"],
        v2["sha3_256-cpu-arguments-slope"],
        v2["sha3_256-memory-arguments"],
        v2["sliceByteString-cpu-arguments-intercept"],
        v2["sliceByteString-cpu-arguments-slope"],
        v2["sliceByteString-memory-arguments-intercept"],
        v2["sliceByteString-memory-arguments-slope"],
        v2["sndPair-cpu-arguments"],
        v2["sndPair-memory-arguments"],
        v2["subtractInteger-cpu-arguments-intercept"],
        v2["subtractInteger-cpu-arguments-slope"],
        v2["subtractInteger-memory-arguments-intercept"],
        v2["subtractInteger-memory-arguments-slope"],
        v2["tailList-cpu-arguments"],
        v2["tailList-memory-arguments"],
        v2["trace-cpu-arguments"],
        v2["trace-memory-arguments"],
        v2["unBData-cpu-arguments"],
        v2["unBData-memory-arguments"],
        v2["unConstrData-cpu-arguments"],
        v2["unConstrData-memory-arguments"],
        v2["unIData-cpu-arguments"],
        v2["unIData-memory-arguments"],
        v2["unListData-cpu-arguments"],
        v2["unListData-memory-arguments"],
        v2["unMapData-cpu-arguments"],
        v2["unMapData-memory-arguments"],
        v2["verifyEcdsaSecp256k1Signature-cpu-arguments"],
        v2["verifyEcdsaSecp256k1Signature-memory-arguments"],
        v2["verifyEd25519Signature-cpu-arguments-intercept"],
        v2["verifyEd25519Signature-cpu-arguments-slope"],
        v2["verifyEd25519Signature-memory-arguments"],
        v2["verifySchnorrSecp256k1Signature-cpu-arguments-intercept"],
        v2["verifySchnorrSecp256k1Signature-cpu-arguments-slope"],
        v2["verifySchnorrSecp256k1Signature-memory-arguments"]
    ]) as any;
}

export interface CostModelPlutusV1 {
    "addInteger-cpu-arguments-intercept": CanBeUInteger,
    "addInteger-cpu-arguments-slope": CanBeUInteger,
    "addInteger-memory-arguments-intercept": CanBeUInteger,
    "addInteger-memory-arguments-slope": CanBeUInteger,
    "appendByteString-cpu-arguments-intercept": CanBeUInteger,
    "appendByteString-cpu-arguments-slope": CanBeUInteger,
    "appendByteString-memory-arguments-intercept": CanBeUInteger,
    "appendByteString-memory-arguments-slope": CanBeUInteger,
    "appendString-cpu-arguments-intercept": CanBeUInteger,
    "appendString-cpu-arguments-slope": CanBeUInteger,
    "appendString-memory-arguments-intercept": CanBeUInteger,
    "appendString-memory-arguments-slope": CanBeUInteger,
    "bData-cpu-arguments": CanBeUInteger,
    "bData-memory-arguments": CanBeUInteger,
    "blake2b_256-cpu-arguments-intercept": CanBeUInteger,
    "blake2b_256-cpu-arguments-slope": CanBeUInteger,
    "blake2b_256-memory-arguments": CanBeUInteger,
    "cekApplyCost-exBudgetCPU": CanBeUInteger,
    "cekApplyCost-exBudgetMemory": CanBeUInteger,
    "cekBuiltinCost-exBudgetCPU": CanBeUInteger,
    "cekBuiltinCost-exBudgetMemory": CanBeUInteger,
    "cekConstCost-exBudgetCPU": CanBeUInteger,
    "cekConstCost-exBudgetMemory": CanBeUInteger,
    "cekDelayCost-exBudgetCPU": CanBeUInteger,
    "cekDelayCost-exBudgetMemory": CanBeUInteger,
    "cekForceCost-exBudgetCPU": CanBeUInteger,
    "cekForceCost-exBudgetMemory": CanBeUInteger,
    "cekLamCost-exBudgetCPU": CanBeUInteger,
    "cekLamCost-exBudgetMemory": CanBeUInteger,
    "cekStartupCost-exBudgetCPU": CanBeUInteger,
    "cekStartupCost-exBudgetMemory": CanBeUInteger,
    "cekVarCost-exBudgetCPU": CanBeUInteger,
    "cekVarCost-exBudgetMemory": CanBeUInteger,
    "chooseData-cpu-arguments": CanBeUInteger,
    "chooseData-memory-arguments": CanBeUInteger,
    "chooseList-cpu-arguments": CanBeUInteger,
    "chooseList-memory-arguments": CanBeUInteger,
    "chooseUnit-cpu-arguments": CanBeUInteger,
    "chooseUnit-memory-arguments": CanBeUInteger,
    "consByteString-cpu-arguments-intercept": CanBeUInteger,
    "consByteString-cpu-arguments-slope": CanBeUInteger,
    "consByteString-memory-arguments-intercept": CanBeUInteger,
    "consByteString-memory-arguments-slope": CanBeUInteger,
    "constrData-cpu-arguments": CanBeUInteger,
    "constrData-memory-arguments": CanBeUInteger,
    "decodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "decodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "decodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "decodeUtf8-memory-arguments-slope": CanBeUInteger,
    "divideInteger-cpu-arguments-constant": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "divideInteger-memory-arguments-intercept": CanBeUInteger,
    "divideInteger-memory-arguments-minimum": CanBeUInteger,
    "divideInteger-memory-arguments-slope": CanBeUInteger,
    "encodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "encodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "encodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "encodeUtf8-memory-arguments-slope": CanBeUInteger,
    "equalsByteString-cpu-arguments-constant": CanBeUInteger,
    "equalsByteString-cpu-arguments-intercept": CanBeUInteger,
    "equalsByteString-cpu-arguments-slope": CanBeUInteger,
    "equalsByteString-memory-arguments": CanBeUInteger,
    "equalsData-cpu-arguments-intercept": CanBeUInteger,
    "equalsData-cpu-arguments-slope": CanBeUInteger,
    "equalsData-memory-arguments": CanBeUInteger,
    "equalsInteger-cpu-arguments-intercept": CanBeUInteger,
    "equalsInteger-cpu-arguments-slope": CanBeUInteger,
    "equalsInteger-memory-arguments": CanBeUInteger,
    "equalsString-cpu-arguments-constant": CanBeUInteger,
    "equalsString-cpu-arguments-intercept": CanBeUInteger,
    "equalsString-cpu-arguments-slope": CanBeUInteger,
    "equalsString-memory-arguments": CanBeUInteger,
    "fstPair-cpu-arguments": CanBeUInteger,
    "fstPair-memory-arguments": CanBeUInteger,
    "headList-cpu-arguments": CanBeUInteger,
    "headList-memory-arguments": CanBeUInteger,
    "iData-cpu-arguments": CanBeUInteger,
    "iData-memory-arguments": CanBeUInteger,
    "ifThenElse-cpu-arguments": CanBeUInteger,
    "ifThenElse-memory-arguments": CanBeUInteger,
    "indexByteString-cpu-arguments": CanBeUInteger,
    "indexByteString-memory-arguments": CanBeUInteger,
    "lengthOfByteString-cpu-arguments": CanBeUInteger,
    "lengthOfByteString-memory-arguments": CanBeUInteger,
    "lessThanByteString-cpu-arguments-intercept": CanBeUInteger,
    "lessThanByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanByteString-memory-arguments": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsByteString-memory-arguments": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsInteger-memory-arguments": CanBeUInteger,
    "lessThanInteger-cpu-arguments-intercept": CanBeUInteger,
    "lessThanInteger-cpu-arguments-slope": CanBeUInteger,
    "lessThanInteger-memory-arguments": CanBeUInteger,
    "listData-cpu-arguments": CanBeUInteger,
    "listData-memory-arguments": CanBeUInteger,
    "mapData-cpu-arguments": CanBeUInteger,
    "mapData-memory-arguments": CanBeUInteger,
    "mkCons-cpu-arguments": CanBeUInteger,
    "mkCons-memory-arguments": CanBeUInteger,
    "mkNilData-cpu-arguments": CanBeUInteger,
    "mkNilData-memory-arguments": CanBeUInteger,
    "mkNilPairData-cpu-arguments": CanBeUInteger,
    "mkNilPairData-memory-arguments": CanBeUInteger,
    "mkPairData-cpu-arguments": CanBeUInteger,
    "mkPairData-memory-arguments": CanBeUInteger,
    "modInteger-cpu-arguments-constant": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "modInteger-memory-arguments-intercept": CanBeUInteger,
    "modInteger-memory-arguments-minimum": CanBeUInteger,
    "modInteger-memory-arguments-slope": CanBeUInteger,
    "multiplyInteger-cpu-arguments-intercept": CanBeUInteger,
    "multiplyInteger-cpu-arguments-slope": CanBeUInteger,
    "multiplyInteger-memory-arguments-intercept": CanBeUInteger,
    "multiplyInteger-memory-arguments-slope": CanBeUInteger,
    "nullList-cpu-arguments": CanBeUInteger,
    "nullList-memory-arguments": CanBeUInteger,
    "quotientInteger-cpu-arguments-constant": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "quotientInteger-memory-arguments-intercept": CanBeUInteger,
    "quotientInteger-memory-arguments-minimum": CanBeUInteger,
    "quotientInteger-memory-arguments-slope": CanBeUInteger,
    "remainderInteger-cpu-arguments-constant": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "remainderInteger-memory-arguments-intercept": CanBeUInteger,
    "remainderInteger-memory-arguments-minimum": CanBeUInteger,
    "remainderInteger-memory-arguments-slope": CanBeUInteger,
    "sha2_256-cpu-arguments-intercept": CanBeUInteger,
    "sha2_256-cpu-arguments-slope": CanBeUInteger,
    "sha2_256-memory-arguments": CanBeUInteger,
    "sha3_256-cpu-arguments-intercept": CanBeUInteger,
    "sha3_256-cpu-arguments-slope": CanBeUInteger,
    "sha3_256-memory-arguments": CanBeUInteger,
    "sliceByteString-cpu-arguments-intercept": CanBeUInteger,
    "sliceByteString-cpu-arguments-slope": CanBeUInteger,
    "sliceByteString-memory-arguments-intercept": CanBeUInteger,
    "sliceByteString-memory-arguments-slope": CanBeUInteger,
    "sndPair-cpu-arguments": CanBeUInteger,
    "sndPair-memory-arguments": CanBeUInteger,
    "subtractInteger-cpu-arguments-intercept": CanBeUInteger,
    "subtractInteger-cpu-arguments-slope": CanBeUInteger,
    "subtractInteger-memory-arguments-intercept": CanBeUInteger,
    "subtractInteger-memory-arguments-slope": CanBeUInteger,
    "tailList-cpu-arguments": CanBeUInteger,
    "tailList-memory-arguments": CanBeUInteger,
    "trace-cpu-arguments": CanBeUInteger,
    "trace-memory-arguments": CanBeUInteger,
    "unBData-cpu-arguments": CanBeUInteger,
    "unBData-memory-arguments": CanBeUInteger,
    "unConstrData-cpu-arguments": CanBeUInteger,
    "unConstrData-memory-arguments": CanBeUInteger,
    "unIData-cpu-arguments": CanBeUInteger,
    "unIData-memory-arguments": CanBeUInteger,
    "unListData-cpu-arguments": CanBeUInteger,
    "unListData-memory-arguments": CanBeUInteger,
    "unMapData-cpu-arguments": CanBeUInteger,
    "unMapData-memory-arguments": CanBeUInteger,
    "verifyEd25519Signature-cpu-arguments-intercept": CanBeUInteger,
    "verifyEd25519Signature-cpu-arguments-slope": CanBeUInteger,
    "verifyEd25519Signature-memory-arguments": CanBeUInteger
};

// 166 CanBeUInteger
export type CostModelPlutusV1Array = [
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
]

export interface CostModelPlutusV2 {
    "addInteger-cpu-arguments-intercept": CanBeUInteger,
    "addInteger-cpu-arguments-slope": CanBeUInteger,
    "addInteger-memory-arguments-intercept": CanBeUInteger,
    "addInteger-memory-arguments-slope": CanBeUInteger,
    "appendByteString-cpu-arguments-intercept": CanBeUInteger,
    "appendByteString-cpu-arguments-slope": CanBeUInteger,
    "appendByteString-memory-arguments-intercept": CanBeUInteger,
    "appendByteString-memory-arguments-slope": CanBeUInteger,
    "appendString-cpu-arguments-intercept": CanBeUInteger,
    "appendString-cpu-arguments-slope": CanBeUInteger,
    "appendString-memory-arguments-intercept": CanBeUInteger,
    "appendString-memory-arguments-slope": CanBeUInteger,
    "bData-cpu-arguments": CanBeUInteger,
    "bData-memory-arguments": CanBeUInteger,
    "blake2b_256-cpu-arguments-intercept": CanBeUInteger,
    "blake2b_256-cpu-arguments-slope": CanBeUInteger,
    "blake2b_256-memory-arguments": CanBeUInteger,
    "cekApplyCost-exBudgetCPU": CanBeUInteger,
    "cekApplyCost-exBudgetMemory": CanBeUInteger,
    "cekBuiltinCost-exBudgetCPU": CanBeUInteger,
    "cekBuiltinCost-exBudgetMemory": CanBeUInteger,
    "cekConstCost-exBudgetCPU": CanBeUInteger,
    "cekConstCost-exBudgetMemory": CanBeUInteger,
    "cekDelayCost-exBudgetCPU": CanBeUInteger,
    "cekDelayCost-exBudgetMemory": CanBeUInteger,
    "cekForceCost-exBudgetCPU": CanBeUInteger,
    "cekForceCost-exBudgetMemory": CanBeUInteger,
    "cekLamCost-exBudgetCPU": CanBeUInteger,
    "cekLamCost-exBudgetMemory": CanBeUInteger,
    "cekStartupCost-exBudgetCPU": CanBeUInteger,
    "cekStartupCost-exBudgetMemory": CanBeUInteger,
    "cekVarCost-exBudgetCPU": CanBeUInteger,
    "cekVarCost-exBudgetMemory": CanBeUInteger,
    "chooseData-cpu-arguments": CanBeUInteger,
    "chooseData-memory-arguments": CanBeUInteger,
    "chooseList-cpu-arguments": CanBeUInteger,
    "chooseList-memory-arguments": CanBeUInteger,
    "chooseUnit-cpu-arguments": CanBeUInteger,
    "chooseUnit-memory-arguments": CanBeUInteger,
    "consByteString-cpu-arguments-intercept": CanBeUInteger,
    "consByteString-cpu-arguments-slope": CanBeUInteger,
    "consByteString-memory-arguments-intercept": CanBeUInteger,
    "consByteString-memory-arguments-slope": CanBeUInteger,
    "constrData-cpu-arguments": CanBeUInteger,
    "constrData-memory-arguments": CanBeUInteger,
    "decodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "decodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "decodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "decodeUtf8-memory-arguments-slope": CanBeUInteger,
    "divideInteger-cpu-arguments-constant": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "divideInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "divideInteger-memory-arguments-intercept": CanBeUInteger,
    "divideInteger-memory-arguments-minimum": CanBeUInteger,
    "divideInteger-memory-arguments-slope": CanBeUInteger,
    "encodeUtf8-cpu-arguments-intercept": CanBeUInteger,
    "encodeUtf8-cpu-arguments-slope": CanBeUInteger,
    "encodeUtf8-memory-arguments-intercept": CanBeUInteger,
    "encodeUtf8-memory-arguments-slope": CanBeUInteger,
    "equalsByteString-cpu-arguments-constant": CanBeUInteger,
    "equalsByteString-cpu-arguments-intercept": CanBeUInteger,
    "equalsByteString-cpu-arguments-slope": CanBeUInteger,
    "equalsByteString-memory-arguments": CanBeUInteger,
    "equalsData-cpu-arguments-intercept": CanBeUInteger,
    "equalsData-cpu-arguments-slope": CanBeUInteger,
    "equalsData-memory-arguments": CanBeUInteger,
    "equalsInteger-cpu-arguments-intercept": CanBeUInteger,
    "equalsInteger-cpu-arguments-slope": CanBeUInteger,
    "equalsInteger-memory-arguments": CanBeUInteger,
    "equalsString-cpu-arguments-constant": CanBeUInteger,
    "equalsString-cpu-arguments-intercept": CanBeUInteger,
    "equalsString-cpu-arguments-slope": CanBeUInteger,
    "equalsString-memory-arguments": CanBeUInteger,
    "fstPair-cpu-arguments": CanBeUInteger,
    "fstPair-memory-arguments": CanBeUInteger,
    "headList-cpu-arguments": CanBeUInteger,
    "headList-memory-arguments": CanBeUInteger,
    "iData-cpu-arguments": CanBeUInteger,
    "iData-memory-arguments": CanBeUInteger,
    "ifThenElse-cpu-arguments": CanBeUInteger,
    "ifThenElse-memory-arguments": CanBeUInteger,
    "indexByteString-cpu-arguments": CanBeUInteger,
    "indexByteString-memory-arguments": CanBeUInteger,
    "lengthOfByteString-cpu-arguments": CanBeUInteger,
    "lengthOfByteString-memory-arguments": CanBeUInteger,
    "lessThanByteString-cpu-arguments-intercept": CanBeUInteger,
    "lessThanByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanByteString-memory-arguments": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsByteString-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsByteString-memory-arguments": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-intercept": CanBeUInteger,
    "lessThanEqualsInteger-cpu-arguments-slope": CanBeUInteger,
    "lessThanEqualsInteger-memory-arguments": CanBeUInteger,
    "lessThanInteger-cpu-arguments-intercept": CanBeUInteger,
    "lessThanInteger-cpu-arguments-slope": CanBeUInteger,
    "lessThanInteger-memory-arguments": CanBeUInteger,
    "listData-cpu-arguments": CanBeUInteger,
    "listData-memory-arguments": CanBeUInteger,
    "mapData-cpu-arguments": CanBeUInteger,
    "mapData-memory-arguments": CanBeUInteger,
    "mkCons-cpu-arguments": CanBeUInteger,
    "mkCons-memory-arguments": CanBeUInteger,
    "mkNilData-cpu-arguments": CanBeUInteger,
    "mkNilData-memory-arguments": CanBeUInteger,
    "mkNilPairData-cpu-arguments": CanBeUInteger,
    "mkNilPairData-memory-arguments": CanBeUInteger,
    "mkPairData-cpu-arguments": CanBeUInteger,
    "mkPairData-memory-arguments": CanBeUInteger,
    "modInteger-cpu-arguments-constant": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "modInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "modInteger-memory-arguments-intercept": CanBeUInteger,
    "modInteger-memory-arguments-minimum": CanBeUInteger,
    "modInteger-memory-arguments-slope": CanBeUInteger,
    "multiplyInteger-cpu-arguments-intercept": CanBeUInteger,
    "multiplyInteger-cpu-arguments-slope": CanBeUInteger,
    "multiplyInteger-memory-arguments-intercept": CanBeUInteger,
    "multiplyInteger-memory-arguments-slope": CanBeUInteger,
    "nullList-cpu-arguments": CanBeUInteger,
    "nullList-memory-arguments": CanBeUInteger,
    "quotientInteger-cpu-arguments-constant": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "quotientInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "quotientInteger-memory-arguments-intercept": CanBeUInteger,
    "quotientInteger-memory-arguments-minimum": CanBeUInteger,
    "quotientInteger-memory-arguments-slope": CanBeUInteger,
    "remainderInteger-cpu-arguments-constant": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-intercept": CanBeUInteger,
    "remainderInteger-cpu-arguments-model-arguments-slope": CanBeUInteger,
    "remainderInteger-memory-arguments-intercept": CanBeUInteger,
    "remainderInteger-memory-arguments-minimum": CanBeUInteger,
    "remainderInteger-memory-arguments-slope": CanBeUInteger,
    "serialiseData-cpu-arguments-intercept": CanBeUInteger,
    "serialiseData-cpu-arguments-slope": CanBeUInteger,
    "serialiseData-memory-arguments-intercept": CanBeUInteger,
    "serialiseData-memory-arguments-slope": CanBeUInteger,
    "sha2_256-cpu-arguments-intercept": CanBeUInteger,
    "sha2_256-cpu-arguments-slope": CanBeUInteger,
    "sha2_256-memory-arguments": CanBeUInteger,
    "sha3_256-cpu-arguments-intercept": CanBeUInteger,
    "sha3_256-cpu-arguments-slope": CanBeUInteger,
    "sha3_256-memory-arguments": CanBeUInteger,
    "sliceByteString-cpu-arguments-intercept": CanBeUInteger,
    "sliceByteString-cpu-arguments-slope": CanBeUInteger,
    "sliceByteString-memory-arguments-intercept": CanBeUInteger,
    "sliceByteString-memory-arguments-slope": CanBeUInteger,
    "sndPair-cpu-arguments": CanBeUInteger,
    "sndPair-memory-arguments": CanBeUInteger,
    "subtractInteger-cpu-arguments-intercept": CanBeUInteger,
    "subtractInteger-cpu-arguments-slope": CanBeUInteger,
    "subtractInteger-memory-arguments-intercept": CanBeUInteger,
    "subtractInteger-memory-arguments-slope": CanBeUInteger,
    "tailList-cpu-arguments": CanBeUInteger,
    "tailList-memory-arguments": CanBeUInteger,
    "trace-cpu-arguments": CanBeUInteger,
    "trace-memory-arguments": CanBeUInteger,
    "unBData-cpu-arguments": CanBeUInteger,
    "unBData-memory-arguments": CanBeUInteger,
    "unConstrData-cpu-arguments": CanBeUInteger,
    "unConstrData-memory-arguments": CanBeUInteger,
    "unIData-cpu-arguments": CanBeUInteger,
    "unIData-memory-arguments": CanBeUInteger,
    "unListData-cpu-arguments": CanBeUInteger,
    "unListData-memory-arguments": CanBeUInteger,
    "unMapData-cpu-arguments": CanBeUInteger,
    "unMapData-memory-arguments": CanBeUInteger,
    "verifyEcdsaSecp256k1Signature-cpu-arguments": CanBeUInteger,
    "verifyEcdsaSecp256k1Signature-memory-arguments": CanBeUInteger,
    "verifyEd25519Signature-cpu-arguments-intercept": CanBeUInteger,
    "verifyEd25519Signature-cpu-arguments-slope": CanBeUInteger,
    "verifyEd25519Signature-memory-arguments": CanBeUInteger,
    "verifySchnorrSecp256k1Signature-cpu-arguments-intercept": CanBeUInteger,
    "verifySchnorrSecp256k1Signature-cpu-arguments-slope": CanBeUInteger,
    "verifySchnorrSecp256k1Signature-memory-arguments": CanBeUInteger
}

// 175 CanBeUInteger
export type CostModelPlutusV2Array = [
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger,
    CanBeUInteger
]